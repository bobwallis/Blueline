#!/bin/bash

# Get script directory, and cd to it
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ] ; do SOURCE="$(readlink "$SOURCE")"; done
d="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
cd "$d"

# Parse options
usage()
{
cat << EOF

Usage: $0 [options]
This script updates Blueline.

Options:
 --nopull  Prevents the pulling of new application code.
 --nodata  Prevents the update of association/method/tower data
 --force   Prevents the confirmation message
 --help    Shows this message
EOF
}
source "$d/resources/scripts/getopts_long.sh"
CCCBRDATA=true
GITPULL=true
CONFIRM=true
OPTLIND=1
while getopts_long :dpfh opt \
	nodata no_argument \
	nopull no_argument \
	force no_argument \
	help 0 "" "$@"
	do
		case "$opt" in
			d|nodata) CCCBRDATA=false;;
			p|nopull) GITPULL=false;;
			f|force) CONFIRM=false;;
			h|help) usage; exit 0;;
			:) printf >&2 '%s: %s\n' "${0##*/}" "$OPTLERR"
				usage
				exit 1;;
		esac
	done
shift "$(($OPTLIND - 1))"

if [[ $CONFIRM = true ]]
	then
	echo -e "\033[1mUse of this script in a production environment is discouraged\033[0m"
	echo -e "\033[1mIf a step fails, later steps will have undefined consequences\033[0m"
	read -p "Press 'Y' to contiue running the script. Any other key will exit: " -n 1 -r
	if [[ ! $REPLY =~ ^[Yy]$ ]]
	then
	    exit
	fi
fi


# Update composer.phar
if [[ ! ( -e "$d/composer.phar" ) ]]
	then
	echo -e "\n\033[1mInstalling Composer\033[0m"
	curl -sS https://getcomposer.org/installer | php
fi
echo -e "\n\033[1mUpdating Composer\033[0m"
php "$d/composer.phar" self-update


# Pull latest version
if [[ $GITPULL = true ]]
	then
	echo -e "\n\033[1mPulling latest version of Blueline\033[0m"
	#git pull
	# Restart update script (to allow it to update itself)
	"$d/update" --nopull --force
	exit
fi


# Update vendors
echo -e "\n\033[1mUpdating vendors for Blueline\033[0m"
php "$d/composer.phar" install


# Clear cache
echo -e "\n\033[1mClearing Symfony cache\033[0m"
php "$d/app/console" cache:clear --env=prod
php "$d/app/console" cache:warm --env=prod
php "$d/app/console" doctrine:cache:clear-metadata
php "$d/app/console" doctrine:cache:clear-query
php "$d/app/console" doctrine:cache:clear-result


# Verify that Doctrine is properly configured for a production environment, and mappings are up to date
echo -e "\n\033[1mChecking Doctrine configuration\033[0m"
php "$d/app/console" doctrine:ensure-production-settings --env=prod
php "$d/app/console" doctrine:schema:validate


# Rebuild web assets
echo -e "\n\033[1mRebuilding CSS and JS assets\033[0m"
rm -rf "$d/web/css"
rm -rf "$d/web/js"
php "$d/app/console" assetic:dump --env=prod --no-debug
sed -i -e"s/asset_update: .*/asset_update: `date --rfc-3339=seconds`/" "$d/app/config/parameters.yml"


if [[ $CCCBRDATA = true ]]
	then
	# Download external data
	echo -e "\n\033[1mDownloading external data\033[0m"
	"$d/src/Blueline/MethodsBundle/Resources/data/fetch"
	"$d/src/Blueline/TowersBundle/Resources/data/fetch"

	# Import updated association data
	php "$d/app/console" blueline:importAssociations

	# Import updated tower data
	php "$d/app/console" blueline:importTowers
	php "$d/app/console" blueline:importOldPKs

	# Import updated method data
	php "$d/app/console" blueline:importMethods

	sed -i -e"s/database_update: .*/database_update: `date --rfc-3339=seconds`/" "$d/app/config/parameters.yml"
fi

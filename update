#!/bin/bash

# Get script directory, and cd to it
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ] ; do SOURCE="$(readlink "$SOURCE")"; done
d="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
cd "$d"

# Parse options
usage()
{
cat << EOF

Usage: $0 [options]
This script updates Blueline.

Options:
 --nopull  Prevents the pulling of new application code.
 --nodata  Prevents the update of association/method/tower data
 --dev     Updates a development version
 --help    Shows this message
EOF
}
source "$d/bin/getopts_long.sh"
CCCBRDATA=true
GITPULL=true
DEV=false
OPTLIND=1
while getopts_long :dpfeh opt \
	nodata no_argument \
	nopull no_argument \
	dev no_argument \
	help 0 "" "$@"
	do
		case "$opt" in
			d|nodata) CCCBRDATA=false;;
			p|nopull) GITPULL=false;;
			e|dev) DEV=true;;
			h|help) usage; exit 0;;
			:) printf >&2 '%s: %s\n' "${0##*/}" "$OPTLERR"
				usage
				exit 1;;
		esac
	done
shift "$(($OPTLIND - 1))"

# Pull latest version
if [[ $GITPULL = true && $DEV = false ]]
	then
	echo -e "\n\033[1mPulling latest version of Blueline\033[0m"
	git pull
	# Restart update script (to allow it to update itself)
	if [[ $CCCBRDATA = true ]]
	then
		"$d/update" --nopull
	else
		"$d/update" --nopull --nodata
	fi
	exit
fi

# Update vendors
echo -e "\n\033[1mUpdating /vendors\033[0m"
if [[ $DEV = true ]]
	then
	symfony composer update
	else
	symfony composer install --no-dev
fi
symfony composer dump-autoload --optimize

# Update node_modules
echo -e "\n\033[1mUpdating /node_modules\033[0m"
if [[ $DEV = true ]]
	then
	npm update --save-dev
	else
	npm install
fi
npm audit fix

# Clear cache
echo -e "\n\033[1mClearing Symfony cache\033[0m"
symfony console cache:clear
symfony console cache:clear --env=prod
symfony console cache:warm --env=prod
symfony console doctrine:cache:clear-metadata
symfony console doctrine:cache:clear-query
symfony console doctrine:cache:clear-result


# Verify that Doctrine is properly configured for a production environment, and mappings are up to date
echo -e "\n\033[1mChecking Doctrine configuration\033[0m"
symfony console doctrine:ensure-production-settings --env=prod
symfony console doctrine:schema:validate


# Rebuild web assets
"$d/bin/buildFrontendAssets"

if [[ $CCCBRDATA = true ]]
	then
	"$d/bin/fetchAndImportData"
fi

# Dump environment
symfony composer dump-env prod

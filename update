#!/bin/bash

dWhich=`which "$0"`
d=`dirname "$dWhich"`

cd "$d"

# Pull latest version
if [[ -z "$1" || "$1" != "nopull" ]]
then
	echo -e "\n\033[1mPulling latest version\033[0m"
	git pull
	./update nopull $@
	exit
fi

# Read configuration file
echo -e "\n\033[1mReading configuration file\033[0m"
function cfg.parser ()
{
    ini="$(<$1)"                # read the file
    ini="${ini//[/\[}"          # escape [
    ini="${ini//]/\]}"          # escape ]
    IFS=$'\n' && ini=( ${ini} ) # convert to line-array
    ini=( ${ini[*]//;*/} )      # remove comments with ;
    ini=( ${ini[*]/\    =/=} )  # remove tabs before =
    ini=( ${ini[*]/=\   /=} )   # remove tabs be =
    ini=( ${ini[*]/\ =\ /=} )   # remove anything with a space around =
    ini=( ${ini[*]/#\\[/\}$'\n'cfg.section.} ) # set section prefix
    ini=( ${ini[*]/%\\]/ \(} )    # convert text2function (1)
    ini=( ${ini[*]/=/=\( } )    # convert item to array
    ini=( ${ini[*]/%/ \)} )     # close array parenthesis
    ini=( ${ini[*]/%\\ \)/ \\} ) # the multiline trick
    ini=( ${ini[*]/%\( \)/\(\) \{} ) # convert text2function (2)
    ini=( ${ini[*]/%\} \)/\}} ) # remove extra parenthesis
    ini[0]="" # remove first element
    ini[${#ini[*]} + 1]='}'    # add the last brace
    eval "$(echo "${ini[*]}")" # eval the result
}
cfg.parser "app/config/parameters.ini"
cfg.section.parameters

# Update vendors
echo -e "\n\033[1mUpdating vendors\033[0m"
php bin/vendors install

# Clear cache
echo -e "\n\033[1mClearing Symfony cache\033[0m"
./app/console cache:clear --env=prod

# Rebuild web assets
echo -e "\n\033[1mRebuilding assets\033[0m"
./resources/scripts/buildWWW

if [[ ( -z "$1" || "$1" != "nodata" ) && ( -z "$2" || "$2" != "nodata" ) ]]
	then
	# Update SQL generated from online sources
	echo -e "\n\033[1mUpdating SQL generated from online data\033[0m"
	./resources/tables/methods/build
	./resources/tables/methods_duplicates/build
	./resources/tables/towers/build

	# Import generated SQL into the database
	echo -e "\n\033[1mImporting generated SQL\033[0m"
	echo -en "associations.sql..."
	if [ -e "./resources/tables/associations.sql" ]; then
		mysql -u "$database_user" -p"$database_password" -h "$database_host" "$database_name" --default_character_set utf8 < "./resources/tables/associations.sql"
		echo "Done"
	else
		echo "Skipped"
	fi
	echo -en "methods_extras.sql..."
	if [ -e "./resources/tables/methods_extras.sql" ]; then
		mysql -u "$database_user" -p"$database_password" -h "$database_host" "$database_name" --default_character_set utf8 < "./resources/tables/methods_extras.sql"
		echo "Done"
	else
		echo "Skipped"
	fi
	echo -en "methods.sql..."
	if [ -e "./resources/tables/methods/methods.sql" -a "`tail -n 1 "./resources/tables/methods/methods.sql"`" = "-- End" ]; then
		mysql -u "$database_user" -p"$database_password" -h "$database_host" "$database_name" --default_character_set utf8 < "./resources/tables/methods/methods.sql"
		echo "Done"
	else
		echo "Skipped"
	fi
	echo -en "methods_duplicates.sql..."
	if [ -e "./resources/tables/methods_duplicates/methods_duplicates.sql" -a "`tail -n 1 "./resources/tables/methods_duplicates/methods_duplicates.sql"`" = "-- End" ]; then
		mysql -u "$database_user" -p"$database_password" -h "$database_host" "$database_name" --default_character_set utf8 < "./resources/tables/methods_duplicates/methods_duplicates.sql"
		echo "Done"
	else
		echo "Skipped"
	fi
	echo -en "towers.sql..."
	if [ -e "./resources/tables/towers/towers.sql" -a "`tail -n 1 "./resources/tables/towers/towers.sql"`" = "-- End" ]; then
		mysql -u "$database_user" -p"$database_password" -h "$database_host" "$database_name" --default_character_set utf8 < "./resources/tables/towers/towers.sql"
		echo "Done"
	else
		echo "Skipped"
	fi

	# Update SQL generated from Blueline database
	echo -e "\n\033[1mUpdating SQL generated from Blueline database\033[0m"
	./resources/tables/methods_towers/build

	# Import generated SQL into the database
	echo -e "\n\033[1mImporting generated SQL\033[0m"
	echo -en "methods_towers.sql..."
	if [ -e "./resources/tables/methods_towers/methods_towers.sql" -a "`tail -n 1 "./resources/tables/methods_towers/methods_towers.sql"`" = "-- End" ]; then
		mysql -u "$database_user" -p"$database_password" -h "$database_host" "$database_name" --default_character_set utf8 < "./resources/tables/methods_towers/methods_towers.sql"
		echo "Done"
	else
		echo "Skipped"
	fi
	
	# Update database_update parameter in parameters.ini
	if [ ! -h "$d/app/config/parameters.ini" ]
	then
		echo -e "\n\033[1mUpdating database_update parameter\033[0m"
		sed -i -e"s/    database_update=.*/    database_update=\"`date --rfc-3339=seconds`\"/" "$d/app/config/parameters.ini"
	fi
fi

# Invalidate old Varnish caches
echo -e "\n\033[1mAdding Varnish ban\033[0m"
curl -I -s -X BAN "http://blueline.rsw.me.uk/" | grep "HTTP"

